// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Sotrudniki {
  id                    Int                  @id @default(autoincrement())
  photo                 String?
  last_name             String
  first_name            String
  middle_name           String?
  pol                   Pol                  @default(MALE)
  data_rojdenia         DateTime
  deti                  Int                  @default(0)
  data_priema_na_rabotu DateTime
  zarplata              Int
  zvanie_sotrudnikov    Zvanie_sotrudnikov[]
  role_sotrudnika       Role_sotrudnika[]

  doljnolst       Doljnolst     @relation(fields: [doljnolstId], references: [id])
  doljnolstId     Int
  podrazdelenie   Podrazdelenie @relation(fields: [podrazdelenieId], references: [id])
  podrazdelenieId Int
}

model Doljnolst {
  id   Int    @id @default(autoincrement())
  name String

  sotrudniki Sotrudniki[]
}

model Podrazdelenie {
  id         Int          @id @default(autoincrement())
  name       String
  sotrudniki Sotrudniki[]
}

model Zvanie_sotrudnikov {
  id           Int       @id @default(autoincrement())
  data_vidachi DateTime?
  zvanie       String
  konkurs      String?

  sotrudniki   Sotrudniki @relation(fields: [sotrudnikiId], references: [id])
  sotrudnikiId Int
}

model Role_sotrudnika {
  id           Int       @id @default(autoincrement())
  data_vidachi DateTime?

  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  sotrudniki   Sotrudniki @relation(fields: [sotrudnikiId], references: [id])
  sotrudnikiId Int
}

model Role {
  id              Int               @id @default(autoincrement())
  name            String
  role_sotrudnika Role_sotrudnika[]

  vid_role    Vid_role  @relation(fields: [vid_roleId], references: [id])
  vid_roleId  Int
  spektakli   Spektakli @relation(fields: [spektakliId], references: [id])
  spektakliId Int
}

model Vid_role {
  id   Int    @id @default(autoincrement())
  name String
  role Role[]
}

model Spektakli {
  id       Int     @id @default(autoincrement())
  name     String
  opisanie String?
  photo    String?
  role     Role[]
  pokaz    Pokaz[]

  avtor   Avtor @relation(fields: [avtorId], references: [id])
  avtorId Int
  janri   Janri @relation(fields: [janriId], references: [id])
  janriId Int
}

model Avtor {
  id          Int     @id @default(autoincrement())
  photo       String?
  last_name   String
  first_name  String
  middle_name String?
  o_avtore    String?
  vek         String
  strana      String

  spektakli Spektakli[]
}

model Janri {
  id   Int    @id @default(autoincrement())
  name String

  spektakli Spektakli[]
}

model Pokaz {
  id    Int      @id @default(autoincrement())
  data  DateTime
  time  String
  bilet Bilet[]

  spektakli   Spektakli @relation(fields: [spektakliId], references: [id])
  spektakliId Int
  zal         Zal       @relation(fields: [zalId], references: [id])
  zalId       Int
}

model Zal {
  id    Int     @id @default(autoincrement())
  name  String
  photo String?
  pokaz Pokaz[]
}

model Bilet {
  id    Int @id @default(autoincrement())
  count Int
  cost  Int

  pokaz   Pokaz @relation(fields: [pokazId], references: [id])
  pokazId Int
}

enum Pol {
  FEMALE
  MALE
}
